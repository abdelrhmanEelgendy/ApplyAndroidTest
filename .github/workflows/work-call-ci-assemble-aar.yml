name: Publish AAR Module

on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK:
        required: true
      KEY_STORE_FILE:
        required: true
    inputs:
      MODULE_NAME:
        description: 'Which module you need to run this flow on...'
        type: string
        required: true

    outputs:
      arr_folder_id:
        description: "uploaded arr folder name"
        value: ${{ jobs.assemble.outputs.folder_name }}

jobs:
  assemble:
    name: Assemble Android Module AAR
    runs-on: ubuntu-latest
    env:
      ARR_FOLDER_NAME: "assemble_module"
    outputs:
      folder_name: ${{ steps.assign_arr_folder.outputs.folder_name }}
    steps:

      - name: Checkout the code
        uses: actions/checkout@v3

#        #BUILD  CACHING
#      - name: Cache Gradle dependencies
#        uses: actions/cache@v2
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-

          #SETUP JAVA



      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'


      - name: Decode Key Store Value 🔑
        id: decode-base64
        run: |
          echo "${{secrets.KEY_STORE_FILE}}" | base64 --decode > ${{ runner.temp }}/tmp.jks
          echo "key_store_path=${{ runner.temp }}/tmp.jks" >> $GITHUB_OUTPUT




      - name : Print Key Store Value 🔑
        run: |
          cat ${{ steps.decode-base64.outputs.key_store_path }}

      - name: Grant Permission for Gradlew to Execute
        run: chmod +x ./gradlew

#      - name: Generate HTML DOC Jar 📝
#        id: doc_jar
#        run: ./gradlew ${{ inputs.MODULE_NAME }}:dokkaJavadocJar

      - name: Build AAR ⚙️🛠
        run: ./gradlew ${{ inputs.MODULE_NAME }}:assembleRelease

      - name: Upload Assemble Module AAR
        # Upload report to ubuntu server to be used on another action...
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARR_FOLDER_NAME }}
          path: ${{ inputs.MODULE_NAME }}/build/outputs/aar/**-release.aar
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

      - name: Assign ARR FOLDER AS OUTPUT
        id: assign_arr_folder
        run: echo "folder_name=$ARR_FOLDER_NAME" >> $GITHUB_OUTPUT


#      - name: Ping Slack Assemble Module AAR Failed
#        uses: someimportantcompany/github-actions-slack-message@v1
#        if: failure()
#        with:
#          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
#          text: |
#            *Assemble Android-module AAR failed*
#          color: failure

name: Sign AAB 🗳

on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK:
        required: true
      KEY_ALIAS:
        required: true
      KEYSTORE_PASSWORD:
        required: true
      KEY_PASSWORD:
        required: true
      KEY_STORE_FILE_CONTENT:
        required: true

    inputs:
      UPLOADED_AAB_FILES_ID:
        description: 'The id for the files needs to be downloaded from artifacts and uploaded to git release.. '
        type: string
        required: true

      MODULE_NAME:
        description: 'Which module you need to run this flow on..'
        type: string
        required: true

    outputs:
      release_url:
        description: "Release url link for the zip file."
        value: ${{ jobs.sign_abb.outputs.release_url }}

      zip_folder_id:
        description: "uploaded zip folder name"
        value: ${{ jobs.sign_abb.outputs.zip_folder_name }}


jobs:

  sign_abb:
    name: Sign ABB.
    runs-on: ubuntu-latest

    env:
      ZIP_FOLDER_NAME: "zip_module"
      VERSIONED_MODULE_NAME: ${{ inputs.MODULE_NAME }}-${{ github.ref_name }}

    outputs:
      release_url: ${{ steps.assign_output_urls.outputs.release_url }}
      zip_folder_name: ${{ steps.assign_zip_folder.outputs.folder_name }}

    steps:
      - name: Checkout the code 📥
        uses: actions/checkout@v3

      - name: Set up JDK 17 📦
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Grant execute permission for gradlew 📜
        run: chmod +x gradlew

      - name: Download artifacts 📥
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.UPLOADED_AAB_FILES_ID }}
          path: ${{ github.workspace }}/${{ inputs.UPLOADED_AAB_FILES_ID }}

      - name: List downloaded files 📂
        run: ls ${{ github.workspace }}/${{ inputs.UPLOADED_AAB_FILES_ID }}

      - name: Rename AAB file 📝
        id: renamed_aab_file
        run: |
          old_path=$(find "${{ github.workspace }}/${{ inputs.UPLOADED_AAB_FILES_ID }}" -type f -name '**-release.aab' -print -quit)
          new_path="${{ github.workspace }}/${{ inputs.UPLOADED_AAB_FILES_ID }}/$VERSIONED_MODULE_NAME-release.aab"
          mv $old_path $new_path
          echo "renamed_abb_path=$new_path" >> $GITHUB_OUTPUT

      - name: Decode Key Store Value 🔑
        id: decode-base64
        run: |
          echo "${{secrets.KEY_STORE_FILE_CONTENT}}" | base64 --decode > ${{ runner.temp }}/tmp.jks
          echo "key_store_path=${{ runner.temp }}/tmp.jks" >> $GITHUB_OUTPUT

      - name : Sign ABB Using Decoded Key Store 🔑
        run: jarsigner -keystore ${{ steps.decode-base64.outputs.key_store_path }} -storepass ${{ secrets.KEYSTORE_PASSWORD }} -keypass ${{ secrets.KEY_PASSWORD }} -signedjar ${{steps.renamed_aab_file.outputs.renamed_abb_path}} ${{steps.renamed_aab_file.outputs.renamed_abb_path}} ${{ secrets.KEY_ALIAS }}

        
      - name: Assign Urls 🗜
        id: assign_output_urls
        run: |
          abb_path=${{steps.renamed_aab_file.outputs.renamed_abb_path}}
          echo "aab_url=$abb_path" >> $GITHUB_OUTPUT
          echo "release_url=${{ github.workspace }}/$ZIP_FOLDER_NAME/$VERSIONED_MODULE_NAME-release.aab" >> $GITHUB_OUTPUT


      - name: Upload Assembled Zip File As Artifact 📤
        # Upload zip to ubuntu server to be used on another action...
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ZIP_FOLDER_NAME }}
          path: ${{steps.assign_output_urls.outputs.aab_url}}
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

      - name: Assign ZIP FOLDER AS OUTPUT
        id: assign_zip_folder
        run: echo "folder_name=$ZIP_FOLDER_NAME" >> $GITHUB_OUTPUT

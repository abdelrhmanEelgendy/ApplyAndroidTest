#name: Split Sign and Create Zip
#
#on:
#  workflow_call:
#    secrets:
#      SLACK_WEBHOOK:
#        required: true
#    inputs:
#      UPLOADED_FILES_ID:
#        description: 'The id for the files needs to be downloaded from artifacts and uploaded to git release..'
#        type: string
#        required: true
#
#jobs:
#  git_release:
#    name: Generate Github Release
#    runs-on: ubuntu-latest
#    # Map the job outputs to step outputs
#    outputs:
#      release_url: ${{ steps.create_release.outputs.upload_url }}
#
#    steps:
#      - name: Create Release ✅
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: ${{ github.ref }}
#          draft: false
#          prerelease: false
#
#  download-file:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v2
#
#      - name: Download artifacts
#        uses: actions/download-artifact@v2
#        with:
#          name: ${{ inputs.UPLOADED_FILES_ID }}
#          path: ${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}
#
#      - name: List downloaded files
#        run: ls ${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}
#
#  generate-and-sign-file:
#    needs: [download-file]
#    runs-on: ubuntu-latest
#    steps:
#      - name: List downloaded files
#        run: ls ${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}
#      - name: Rename AAR file 📝
#        id: renamed_aar_file
#        run: |
#          arr_path=$(find "${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}" -type f -name '**-release.aar' -print -quit)
#          renamed_result="${arr_path/-release/-${{ github.ref_name }}-release}"
#          mv $arr_path $renamed_result
#          echo "renamed_arr=$renamed_result" >> $GITHUB_OUTPUT
#
#      - name: Create Keystore 🔑
#        run: keytool -genkeypair -v -keystore key_store_name.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key_alias -dname "CN=Your Name, OU=Your Organizational Unit, O=Your Organization, L=Your Locality, ST=Your State, C=Your Country" -storepass 123456  -keypass 123456
#
#      - name: Sign ARR 🖋
#        run: jarsigner -keystore key_store_name.jks -storepass 123456 -keypass 123456 -signedjar ${{steps.renamed_aar_file.outputs.renamed_arr}}  ${{steps.renamed_aar_file.outputs.renamed_arr}}  key_alias
#
#  calculate-checksum:
#    needs: [generate-and-sign-file]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Calculate SHA-256 Checksum 🔍
#        id: checksum
#        run: |
#          full_path=${{steps.renamed_aar_file.outputs.renamed_arr}}
#          filename=$(basename "${full_path}")
#          module_name="${filename/.aar/}"
#          CHECKSUM=$(sha256sum "${full_path}" | cut -d ' ' -f 1)
#          echo "$CHECKSUM" > "${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}/${module_name}-checksum.txt"
#          echo "module_name=$module_name" >> $GITHUB_OUTPUT
#          echo "check_sum_file=${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}/${module_name}-checksum.txt" >> $GITHUB_OUTPUT
#
#  create-zip-and-upload:
#    needs: [calculate-checksum, git_release] # Replace "git_release" with the correct job name if needed
#    runs-on: ubuntu-latest
#    steps:
#      - name: Create ZIP File 🗜
#        id: zip_file
#        run: |
#          arr_path=${{steps.renamed_aar_file.outputs.renamed_arr}}
#          arr_name=$(basename "${arr_path}")
#          module_name=${{ env.module_name }}
#          check_sum_file=${{steps.checksum.outputs.check_sum_file}}
#          cd ${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}
#          zip -r ${module_name}.zip ${module_name}-checksum.txt ${arr_name}
#          echo "zip_file_path=${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}/${module_name}.zip" >> $GITHUB_OUTPUT
#
#      - name: Upload The Zip File
#        id: upload-arr-checksum
#        uses: sekwah41/upload-release-assets@v1.1.0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.git_release.outputs.release_url }}
#          asset_path: ${{ steps.zip_file.outputs.zip_file_path }}
#          asset_content_type: application/zip
on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK:
        required: true
    inputs:
      UPLOADED_FILES_ID:
        description: 'The id for the files needs to be downloaded from artifacts and uploaded to git release..'
        type: string
        required: true

    outputs:
      release_url:
        description: Release url link for the zip file.
        value: ${{ jobs.sign_arr_and_create_zip.outputs.release_url }}

jobs:

  sign_arr_and_create_zip:
    name: Sign And Zip ARR.
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.zip_file.outputs.release_url }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.UPLOADED_FILES_ID }}
          path: ${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}

      - name: List downloaded files
        run: ls ${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}

      - name: Rename AAR file 📝
        id: renamed_aar_file
        run: |
          arr_path=$(find "${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}" -type f -name '**-release.aar' -print -quit)
          versioned_result="${arr_path/-release/-${{ github.ref_name }}-release}"
          mv $arr_path $versioned_result
          echo "renamed_arr=$versioned_result" >> $GITHUB_OUTPUT

      - name: Create Keystore 🔑
        run: keytool -genkeypair -v -keystore key_store_name.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key_alias -dname "CN=Your Name, OU=Your Organizational Unit, O=Your Organization, L=Your Locality, ST=Your State, C=Your Country" -storepass 123456  -keypass 123456

      - name: Sign ARR 🖋
        run: jarsigner -keystore key_store_name.jks -storepass 123456 -keypass 123456 -signedjar ${{steps.renamed_aar_file.outputs.renamed_arr}} ${{steps.renamed_aar_file.outputs.renamed_arr}} key_alias

      - name: Calculate SHA-256 Checksum 🔍
        id: checksum
        run: |
          full_path=${{steps.renamed_aar_file.outputs.renamed_arr}}
          filename=$(basename "${full_path}")
          module_name="${filename/.aar/}"
          CHECKSUM=$(sha256sum "${full_path}" | cut -d ' ' -f 1)
          echo "$CHECKSUM" > "${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}/${module_name}-checksum.txt"
          echo "module_name=$module_name" >> $GITHUB_OUTPUT
          echo "check_sum_file=${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}/${module_name}-checksum.txt" >> $GITHUB_OUTPUT


      - name: Create ZIP File 🗜
        id: zip_file
        run: |
          arr_path=${{steps.renamed_aar_file.outputs.renamed_arr}}
          arr_name=$(basename "${arr_path}")
          module_name=${{steps.checksum.outputs.module_name}}
          check_sum_file=${{steps.checksum.outputs.check_sum_file}}
          cd ${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}
          zip -r ${module_name}.zip ${module_name}-checksum.txt ${arr_name}
          echo "release_url=${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}/${module_name}.zip" >> $GITHUB_OUTPUT
          

      - name: Upload Assembled Zip
        # Upload report to ubuntu server to be used on another action...
        uses: actions/upload-artifact@v3
        with:
          name: assemble_module
          path: ${{steps.zip_file.outputs.release_url}}
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
#      - name: Upload The Zip File
#        id: upload-arr-checksum
#        uses: sekwah41/upload-release-assets@v1.1.0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.git_release.outputs.release_url }}
#          asset_path: ${{steps.zip_file.outputs.zip_file_path}}
#          asset_content_type: application/zip

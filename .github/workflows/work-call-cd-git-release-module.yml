name: Generate Github Release And Upload Android AAR 🗳

on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK:
        required: true
    inputs:
      UPLOADED_FILES_ID:
        description: 'The id for the files needs to be downloaded from artifacts and uploaded to git release..'
        type: string
        required: true

    outputs:
      release_url:
        description: Release url link for the zip file.
        value: ${{ jobs.upload_matrix_artifacts.outputs.url }}

jobs:
  git_release:
    name: Generate Github Release
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create Release ✅
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

  upload_matrix_artifacts:
    needs: [ git_release ]
    name: Upload Generated Artifacts to Git Release.
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      url: ${{ steps.upload-release-asset.outputs.browser_download_url }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.UPLOADED_FILES_ID }}
          path: ${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}

      - name: List downloaded files
        run: ls ${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}


      - name: Rename AAR file 📝
        id: rename_aar_file
        run: |
          file_name=$(find "${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}" -type f -name '**-release.aar' -print -quit)
          file_result="${file_name/-release/-${{ github.ref_name }}-release}"
          echo "Renaming $file_name to $file_result"
          mv $file_name $file_result
          echo "named_file=$file_result" >> $GITHUB_OUTPUT  

      - name: Create Keystore 🔑
        run: keytool -genkeypair -v -keystore key_store_name.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key_alias -dname "CN=Your Name, OU=Your Organizational Unit, O=Your Organization, L=Your Locality, ST=Your State, C=Your Country" -storepass 123456  -keypass 123456

      - name: Sign ARR 🖋
        run: jarsigner -keystore key_store_name.jks -storepass 123456 -keypass 123456 -signedjar ${{steps.rename_aar_file.outputs.named_file}} ${{steps.rename_aar_file.outputs.named_file}} key_alias

      - name: Calculate SHA-256 Checksum 🔍
        id: checksum
        run: |
          full_path=${{steps.rename_aar_file.outputs.named_file}}
          echo "full_path=$full_path" 
          filename=$(basename "${full_path}")
            echo "filename=$filename"
          module_name="${filename/.aar/}"
          echo "Calculating checksum for $module_name"
          CHECKSUM=$(sha256sum "${full_path}" | cut -d ' ' -f 1)
          echo "$CHECKSUM" > "${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}/${module_name}-checksum.txt"
          echo "Checksum file created"
          echo "module_name=$module_name" >> $GITHUB_OUTPUT
          echo "check_sum_file=${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}/${module_name}-checksum.txt" >> $GITHUB_OUTPUT
 

      - name: Create ZIP File 🗜
        id: zip_file
        run: |
          arr_path=${{steps.rename_aar_file.outputs.named_file}}
          module_name=${{steps.checksum.outputs.module_name}}
          check_sum_file=${{steps.checksum.outputs.check_sum_file}}
          zip -r ${module_name}.zip $arr_path $check_sum_file 
          mv ${module_name}.zip ${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}/
          echo "zip_file_path=${{ github.workspace }}/${{ inputs.UPLOADED_FILES_ID }}/${module_name}.zip" >> $GITHUB_OUTPUT  

      - name: Upload The Zip File
        id: upload-arr-checksum
        uses: sekwah41/upload-release-assets@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.git_release.outputs.release_url }}
          asset_path: ${{steps.zip_file.outputs.zip_file_path}}
          asset_content_type: application/zip
